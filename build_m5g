#!/bin/bash
################################################################################
# Licensed to the Mosaic5G under one or more contributor license
# agreements. See the NOTICE file distributed with this
# work for additional information regarding copyright ownership.
# The Mosaic5G licenses this file to You under the
# Apache License, Version 2.0  (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#  
#    	http://www.apache.org/licenses/LICENSE-2.0
  
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# -------------------------------------------------------------------------------
#   For more information about the Mosaic5G:
#   	contact@mosaic-5g.io
#
#
################################################################################
# file build_m5g
# brief  mosaic5g.io automated build and install tool 
# author  Navid Nikaein

export DEBIAN_FRONTEND=noninteractive


###################################
# colorful echos
###################################

black='\E[30m'
red='\E[31m'
green='\E[32m'
yellow='\E[33m'
blue='\E[1;34m'
magenta='\E[35m'
cyan='\E[36m'
white='\E[37m'
reset_color='\E[00m'
COLORIZE=1

cecho()  {  
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warn()    { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}


################################
# Set the vars 
################################
SUDO='sudo -E'
ORIGIN_PATH=$PWD
m5g_path=$(dirname $(readlink -f $0))
m5g_bin=$m5g_path/bin
mkdir -p $m5g_bin

rtc_path=$m5g_path/flexran
rtc_bin=$rtc_path/build/rt_controller
rtc_branch=master

oai_ran_path=$m5g_path/oai-ran
oai_ran_build=$oai_ran_path/cmake_targets
oai_ran_bin=$oai_ran_path/targets/bin
oai_ran_branch=develop

oai_ue_path=$m5g_path/oai-ue
oai_ue_build=$oai_ue_path/cmake_targets
oai_ue_bin=$oai_ue_path/targets/bin
oai_ue_branch=develop


oai_cn_path=$m5g_path/oai-cn
oai_cn_build=$oai_cn_path/scripts
oai_cn_exec=$oai_cn_path/build
oai_cn_exec_name=''
oai_cn_branch=openair-cn-llmec

jox_path=$m5g_path/jox
jox_exec=$jox_path/scripts
jox_exec_name=jox
jox_branch=develop


llmec_path=$m5g_path/ll-mec
llmec_branch=develop
llmec_bin=$llmec_path/ll-mec

ovs_path=$m5g_path/ovs-gtp
ovs_branch=master
#ovs_bin=$ovs_path/ll-mec-

store_path=$m5g_path/store
store_sdk=$m5g_path/store/sdk
store_branch=develop

kube5g_path=$m5g_path/kube5g
kube5g_sdk=$m5g_path/kube5g
kube5g_branch=develop

echo_info "Mosaic5G Path:           $m5g_path"
echo_info "FlexRAN Path:            $rtc_path"
echo_info "LL-MEC Path:             $llmec_path"
echo_info "OVS Path:                $ovs_path"
echo_info "Jox Path:                $jox_path"
echo_info "Store Path:              $store_path"
echo_info "OAI oai_ran Path:        $oai_ran_path"
echo_info "OAI oai_ue Path:         $oai_ue_path"
echo_info "OAI oai_cn Path:         $oai_cn_path"
echo_info "kube5g Path:             $kube5g_path"


os=$(grep "^ID=" /etc/os-release | sed "s/ID=//" | sed "s/\"//g")
os_release=$(grep "^VERSION_ID=" /etc/os-release | sed "s/VERSION_ID=//" | sed "s/\"//g")
os_dist=$os$os_release
echo_info "Detected OS Dist:        $os_dist"

case "$os" in
  fedora) os_base="fedora"; os_pm="dnf"; os_cmake="cmake" ;;
  rhel)   os_base="fedora"; os_pm="yum"; os_cmake="cmake3" ;;
  centos) os_base="fedora"; os_pm="yum"; os_cmake="cmake3" ;;
  debian) os_base="debian"; os_pm="apt-get"; os_cmake="cmake" ;;
  ubuntu) os_base="debian"; os_pm="apt"; os_cmake="cmake" ;;
esac

check_supported_os_dist() {
    case "$os_dist" in
        "ubuntu18.04") return 0 ;;
	"ubuntu17.10") return 0 ;;
        "ubuntu17.04") return 0 ;;
        "ubuntu16.04") return 0 ;;
        "fedora24")    return 0 ;;
        "rhel7")       return 0 ;;
        "centos7")     return 0 ;;
    esac
    return 1
}
pb_version=3

snap_revision=""

function list_include_item {
  local list="$1"
  local item="$2"
  if [[ $list =~ (^|[[:space:]])"$item"($|[[:space:]]) ]] ; then
    # yes, list include item
    result=0
  else
    result=1
  fi
  return $result
}

################################
# Function to killall the subprocesses when Ctrl-C Key is hit
###############################

function handle_ctrl_c(){
CURPID=$$
ppid=$$
arraycounter=1
echo_info "** Trapped CTRL-C. Killing all subprocesses now..."
while true
do
    FORLOOP=FALSE
    # Get all the child process id
    for i in `ps -ef| awk '$3 == '$ppid' { print $2 }'`
    do
        if [ $i -ne $CURPID ] ; then
            procid[$arraycounter]=$i
            arraycounter=`expr $arraycounter + 1`
            ppid=$i
            FORLOOP=TRUE
        fi
    done
    if [ "$FORLOOP" = "FALSE" ] ; then
        arraycounter=`expr $arraycounter - 1`
        ## We want to kill child process id first and then parent id's
        while [ $arraycounter -ne 0 ]
        do  
            echo "first we send ctrl-c to program"
            $SUDO kill -INT "${procid[$arraycounter]}"
            sleep 3
            echo "Now we force kill if that didn't work"
            $SUDO kill -9 "${procid[$arraycounter]}" >/dev/null
            arraycounter=`expr $arraycounter - 1`
        done
        exit
    fi
done
}

############################
# install additonal tools 
##########################

install_required_packages(){

    if ! check_supported_os_dist; then
        echo_error "Your distribution $os_dist is not supported by Mosaic5G !"
        exit 1
    fi
    
    $SUDO $os_pm  update -y
	$SUDO $os_pm install -y \
	      virt-what \
              build-essential \
	      python-dev  \
	      python-pexpect \
	      python-pip  \
	      python-yaml \
	      libyaml-dev  \
	      python-tk    \
	      doxygen     \
	      npm \
	      curl \
	      jq 
        #snapcraft \
       
    if [ "$os_dist" == "ubuntu18.04" ] ; then
	$SUDO $os_pm install -y \
	      nodejs
    else
	$SUDO $os_pm install -y \
	      nodejs-legacy
    fi

    install_python_packages
    install_npm_packages

    $SUDO snap install snapcraft --classic
    #$SUDO snap install snapcraft --classic
    $SUDO snap install review-tools
    
    install_required_packages_kube5g
}


############################
# install required tools for kube5g
##########################

install_required_packages_kube5g(){

    if ! check_supported_os_dist; then
        echo_error "Your distribution $os_dist is not supported by Mosaic5G !"
        exit 1
    fi
    
    $SUDO $os_pm  update -y
    $SUDO $os_pm install -y \
	  docker.io \
	  docker-compose
    # The following requirements are to run mosaic5g-operator in kubernetes using microK8s
    echo_info "Installing microk8s version 1.14 stable"
    $SUDO snap install microk8s --classic --channel=1.14/stable
    $SUDO snap install kubectl --classic
    echo_info "Starting microk8s"
    microk8s.start
    microk8s.enable dns
    $SUDO chown ${MYNAME} -R $HOME/.kube
    microk8s.kubectl config view --raw > $HOME/.kube/config
    # enable privileged
    $SUDO bash -c 'echo "--allow-privileged=true" >> /var/snap/microk8s/current/args/kubelet'
    $SUDO bash -c 'echo "--allow-privileged=true" >> /var/snap/microk8s/current/args/kube-apiserver'
    # Restart kube
    $SUDO systemctl restart snap.microk8s.daemon-kubelet.service
    $SUDO systemctl restart snap.microk8s.daemon-apiserver.service 
}

pull_docker_images(){
    docker pull mosaic5gecosys/oairan:1.2
    docker pull mosaic5gecosys/oaicn:1.2
    docker pull mosaic5gecosys/m5g_operator:1.0
    docker pull mysql:5.6
}

install_python_packages(){
    
    $SUDO pip install ipcalc
    $SUDO pip install matplotlib
    $SUDO pip install pyyaml
    $SUDO pip install tornado
    $SUDO pip install enum
    $SUDO pip install requests
    $SUDO pip install flask
    
}

install_npm_packages(){
    
    sudo npm install apidoc -g
}
install_optional_packages (){

    if ! check_supported_os_dist; then
        echo_error "Your distribution $os_dist is not supported by Mosaic5G !"
        exit 1
    fi

    $SUDO $os_pm get update
    $SUDO $os_pm install -y \
	  check \
	  dialog \
	  gawk \
	  sshfs \
	  swig  \
	  tshark \
	  exuberant-ctags \
	  ntpdate \
	  tree \
	  htop \
	  python  \
	  vim \
	  emacs \
	  wireshark \
	  ccze \
	  iperf \
	  iperf3 \
	  mscgen \
	  gdb \
	  git \
	  ethtool \
	  meld \
	  hping3 \
	  jq  \
	  wget \
	  libyaml-dev \
	  iperf \
	  iptables \
	  meld    \
	  gitk \
	  openssh-server \
	  screen 

    if [ "$os_dist" == "ubuntu18.04" ] ; then
	$SUDO $os_pm install -y \
	      iproute2
    else
	$SUDO $os_pm install -y \
	      iproute 
    fi

}



#######################################
# install and build mosaic5G.io platforms 
#######################################
install_ovs_kernel(){
    echo "installing the kernel 4.9.x"
    cd /tmp
    
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900_4.9.0-040900.201612111631_all.deb
    
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-headers-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb
    
    wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.9/linux-image-4.9.0-040900-generic_4.9.0-040900.201612111631_amd64.deb
    
    sudo dpkg -i *.deb

    cd -  
}

check_current_kernel(){

    required_kern_version="4.9.0-040900-generic"
    required_kern_major=`echo $required_kern_version | cut -d '.' -f1`
    required_kern_minor=`echo $required_kern_version | cut -d '.' -f2`

    current_kern_release=`uname -r`
    current_kern_major=`echo $current_kern_release | cut -d '.' -f1`
    current_kern_minor=`echo $current_kern_release | cut -d '.' -f2`
    
    if [ $current_kern_major -eq $required_kern_major ] && [ $current_kern_minor -eq $required_kern_minor ]; then
	REQUIRED_KERNEL_IS_INSTALLED="true"
    else
	REQUIRED_KERNEL_IS_INSTALLED="false"
    fi
    
}


build_rtc(){

    git submodule update flexran
    cd $rtc_path
    git checkout $rtc_branch
    echo_info "Cloned FlexRAN controller $rtc_branch branch"
    
    if [ "$kernel" == "generic" ]; then 
	build_args="$build_args -r"
    fi
   
    if [ -z $pb_version ] ; then
        build_args="$build_args -p $pb_version"
    fi

    if [ -z $bind_port ] ; then 
	exec_args="-p $bind_port"	
    fi 

    if [ -z $rest_port ] ; then
        exec_args="$exec_args -n $rest_port"
    fi
        
    export FLEXRAN_RTC_HOME=$rtc_path
    export FLEXRAN_RTC_EXEC=$rtc_exec
   
    ./tools/install_dependencies 
    ./build_flexran_rtc.sh $build_args

    cd $m5g_path
    cp $rtc_bin $m5g_bin
    echo_success "Built FlexRAN RTC branch $rtc_branch in $m5g_bin"
}
build_oai_ran(){
    
    git submodule update oai-ran 
    cd $oai_ran_path
    git checkout $oai_ran_branch
    cd $oai_ran_build
    ./build_oai -I  -w USRP
    ./build_oai -c -C --eNB  -w USRP 

    cd $m5g_path
    cp $oai_ran_bin $m5g_bin
    echo_success "Build OAI RAN $oai_ran_branch branch with FlexRAN agent in $oai_ran_bin"
}
build_oai_ue(){

    git submodule update oai-ue 
    cd $oai_ue_path
    git checkout $oai_ue_branch
    cd $oai_ue_build
    ./build_oai -I  -w USRP
    ./build_oai -c -C --UE  -w USRP 

    cd $m5g_path
    cp $oai_ue_bin $m5g_bin
    echo_success "Build OAI UE $oai_ue_branch branch in $oai_ue_bin"
}

build_oai_cn(){

    git submodule update oai-cn
    cd $oai_cn_path
    git checkout $oai_cn_branch
    cd $oai_cn_build
    ./build_hss -i -F -e
    ./build_hss 

    ./build_spgw -i -f
    ./build_spgw

    ./build_mme -i -f
    ./build_mme
    
    cd $m5g_path
    echo_success "Cloned OAI CN $oai_cn_branch branch with  ll-mec agent"
}

build_llmec(){

    git submodule update ll-mec

    cd $llmec_path
    git checkout $llmec_branch
    ./install_dependencies.sh
    ./build_ll-mec.sh -d 

    cd $m5g_path
    cp $llmec_bin $m5g_bin
    echo_success "Built LL-MEC $llmec_branch branch in $llmec_bin"
}

build_ovs_gtp(){

    git submodule update ovs-gtp
    cd $ovs_path
    git checkout $ovs_branch
    cd ovs_kernel_gtp

    check_current_kernel
    if [ "$REQUIRED_KERNEL_IS_INSTALLED" == "false" ]; then
	echo "You haven't installed kernel 4.9. Do you want to install it now?"
	echo -n 'y/n:'
	read install_kernel

	if [ "$install_kernel" == "y" ] ; then 
	    install_ovs_kernel
	    echo_info "You need to reboot"
	else
	    echo_info "You need to install kernel 4.9 to proceed with the installation of ovs-gtp"
	fi
	exit 0
    else
	echo_info "Required kernel is installed"
    fi
    sudo ./install.sh

    cd $ovs_path
    
    echo_info "Now, it is the time to set the config file so that you can run ovs-gtp"

    #cd $m5g_path
    # insert the module and check for GTP
    #echo_success "Built OVS $ovs_branch branch"
}

build_store(){

    git submodule update store 
    cd $store_path
    git checkout $store_branch
    cd $store_sdk
    mkdir -p docs
    #doxygen
    #apidoc -i lib/ -o ./docs/apidoc -f ".*\\.py$"
    echo_success "Generated the store $store_branch branch"

    cd $m5g_path
    echo_success "Cloned the store $store_branch branch"
}
build_jox(){

    git submodule update jox
    cd $jox_path
    git checkout $jox_branch
    #source ./joxenv
    echo_info "building JoX"
    ./scripts/build_jox.sh -i
    ./scripts/build_jox.sh -x
    
    cd $m5g_path
    echo_success "Cloned JoX $jox_branch branch"
}


build_kube5g(){

    git submodule update kube5g
    cd $kube5g_path
    git checkout $kube5g_branch
    
    cd $m5g_path
    echo_success "Built kube5g $kube5g_branch branch"
}

build_m5g (){
 
    #EDGE nodes
    build_oai_ran
    build_oai_ue
    build_rtc

    #CORE nodes
    build_oai_cn
    build_llmec
    build_ovs_gtp
    
    #Control apps and Orch
    build_store
    build_jox
    
    build_kube5g
}

declare -a oaicn_snaps=("oai-mme" "oai-hss" "oai-spgwc" "oai-spgwu")
snap_m5g_module(){
    echo "Snapping $1"
    snap list $1 &> /dev/null
    if [ $? -eq 0 ]; then
	op="refresh"
    else
	op="install"
    fi
    if [ "$snap_revision" != "" ]; then
	op="$op --revision=$snap_revision"
    fi
    
    if  [ "$1" = "oai-cn2" ] ; then
	for s in "${oaicn_snaps[@]}"
	do
	    snap list $s &> /dev/null
	    if [ $? -eq 0 ]; then
		op="refresh"
	    else
		op="install"
	    fi

	    echo "snap  $op $s"
	    sudo snap $op $s #--channel=edge --devmode
	    echo "-----------------------------------"
	    echo "         $1 SNAP INFO         "
	    echo "-----------------------------------"
	    
	    snap info $s
	done
    elif [ "$1" = "oai-cn" ] ; then
	echo "snap $op $1 --channel=edge --devmode"
	sudo snap $op $1 --channel=edge --devmode
	echo "-----------------------------------"
	echo "         $1 SNAP INFO         "
	echo "-----------------------------------"
    
	snap info $1
    else
	echo "snap $op $1 "
	sudo snap $op $1
	echo "-----------------------------------"
	echo "         $1 SNAP INFO         "
	echo "-----------------------------------"
    
	snap info $1
    fi
}


declare -a snaps=("oai-cn" "oai-cn2" "oai-ran" "oai-ue" "oai-tracer" "flexran" "ll-mec" "oai-sim") 
snap_m5g (){
    for s in "${snaps[@]}"
    do
	snap_m5g_module $s
    done
    echo""
    echo "-------------------------------------"
    echo "     Listing the installed snaps     "
    echo "-------------------------------------"
    echo ""
    snap list 
}

init_snap_m5g(){
    echo ""
    
}

init_build_m5g(){

    if [ ! -f  ./submodule_init ]; then
	git submodule init
	echo "yes"  > ./.submodule_init
    fi 
}

############################
# Clean all
###########################

clean_snaps(){

    if [ "$snap_revision" != "" ]; then
	op="$op --revision=$snap_revision"
    fi

    for s in "${snaps[@]}"
    do
	echo "removing snapping $s"
	sudo snap remove $op $s
    done
    echo ""
    echo "-------------------------------------"
    echo "Listing the current installed snaps  "
    echo "-------------------------------------"
    echo ""
    snap list
}

clean_all(){
    echo_info "cleaning "
    clean_snaps
}

############################
# manage options and helps
###########################
function print_help() {
  echo_info '
This program installs the Mosaic5G.io software platforms from snaps
or build a custom platform from the source file. 
You should have ubuntu 16.xx. Root password required.
Options
-h
   print this help
--clean-snaps
   Clean all the snaps"
-i | --install-required-pkg
   Install required packages for build and/or snap process
-I | --install-all-packages
   Install both required and developper/optional/useful pachages 
-c | --build-oai-cn
   Builds OAI CN with the LL-MEC agent from source
-C | --snap-oai-cn [version]
   install OAI CN with the LL-MEC agent from snap. Available versions v1 (stable) and v2 (latest). v1 is the default
-D | --pull-docker-images
   Pull all the docker images of Mosaic5G
-m | --build-m5g
   Builds all the Mosaic5G.io software plarforms from source 
-M | --snap-m5g
   Install all of the Mosaic5G.io platforms form snap
-j | --build-jox
   Builds JOX Orchestrator
-l | --build-llmec
   Builds lowlatency MEC platform from source
-L | --snap-llmec
   Install lowlatency MEC platform from snap
-f | --build-flexran
   Build FlexRAN realtime controller from source 
-F | --snap-flexran
   Install FlexRAN realtime controller from snap 
-o | --build-ovs-gtp
   Build OVS with GTP support in the kernel space from source 
-O | --snap-ovs-gtp
   Install OVS with GTP support from snap 
-r | --build-oai-ran
   Builds OAI RAN with the FlexRAN agent from source
-R | --snap-oai-ran
   Install OAI RAN with the FlexRAN agent from snap
-s | --build-store
   Builds and setup the store 
-S | --snap-oai-sim
   Install OAI SIM with the FlexRAN agent from snap
-k | --build-kube5g
   Builds and setup the kube5g
-u | --install-ue
   Install OAI UE from source 
-U | --snap-ue
   Install OAI UE from Snap
-v | --revision 
   Install specific revision of the snap. You must have developer access.
-p | --pb-version
   Set the protobuf version for FlexRAN RTC. Valid options 2 and 3.
-T | --snap-tracer
   Install OAI tracer from Snap
Usage:
- build_m5g -i -m : insatll all the sanps and run 
- build_m5g -i -j
'
}


function main() {
    until [ -z "$1" ]; do
	
	case "$1" in
	    --clean-snaps)
		CLEAN_SNAPS=1
		shift;;
	#    -k | --install-kernel)
	#	INSTALL_KERNEL=1
	#	echo_info "Will install the kernel"
	#	shift;;
	    -i | --install-required-pkg)
		INSTALL_PKG=1
		echo_info "Will install the required packages for build and snap process"
		shift;;
	    -I | --install-optional-packages)
		INSTALL_OPTIONAL=1
		echo_info "Will install optional/useful packages"
		shift;;
            -D | --pull-docker-images)
		PULL_DOCKER_IMAGES=1
		echo_info "Will pull all the docker images of Mosaic5G"
		shift;;
	    -m | --build-m5g)
		BUILD_M5G=1
		echo_info "Will build mosaic5G.io platforms from source"
		shift;;
	    -M | --snap-m5g)
		SNAP_M5G=1
		echo_info "Will install mosaic5G.io platforms from snaps"
		shift;;
	    -j | --build-jox)
		BUILD_JOX=1
		echo_info "Will build the environment for JOX"
		shift;;
	    -l | --build-llmec)
		BUILD_LLMEC=1
		echo_info "Will build ll-mec from source"
		shift;;
	    -L | --snap-llmec)
		SNAP_LLMEC=1
		echo_info "Will install ll-mec from snap"
		shift;;
	    -f | --build-flexran)
		BUILD_RTC=1
		echo_info "Will build FlexRAN Realtime Controller (RTC) from source"
		shift;;
	    -F | --snap-flexran)
		SNAP_RTC=1
		echo_info "Will install FlexRAN Realtime Controller (RTC) from snap"
		shift;;
	    -o | --build-ovs-gtp)
		BUILD_OVS_GTP=1
		echo_info "Will build OVS with GTP support in the kernel space from source"
		shift;;
	    -O | --snap-ovs-gtp)
		SNAP_OVS_GTP=1
		echo_info "Will install OVS with GTP from snap"
		shift;;
	    -r | --build-oai-ran)
		BUILD_OAI_RAN=1
		echo_info "Will build OAI RAN with the FlexRAN Agent from source"
		shift;;
	    -R | --snap-oai-ran)
		SNAP_OAI_RAN=1
		echo_info "Will install OAI RAN with the FlexRAN Agent from snap"
		shift;;
	    -s | --build-store)
		BUILD_STORE=1
		echo_info "Will build Mosaic5G store" 
		shift;;
	    -S | --build-oai-sim)
		SNAP_OAI_SIM=1
		echo_info "Will build OAI SIM with the FlexRAN Agent from source"
		shift;;
	    -c | --build-oai-cn)
		BUILD_OAI_CN=1
		echo_info "Will build OAI CN with the LL-MEC Agent from source"
		shift;;
	    -C | --snap-oai-cn)
		list_include_item "v1 v2" $2
		[[ $? -ne 0 ]] && echo "" && echo_error "[ERR] Snap oai-cn version $2 not recognized" && return $?
		SNAP_OAI_CN="$2"
		echo_info "Will install OAI CN $SNAP_OAI_CN with the LL-MEC Agent from snap"
		shift 2 ;;
            -k | --build-kube5g)
		BUILD_KUBE5G=1
		echo_info "Will build kube5G"
		shift;;
	    -p | --protobuf-version)
		echo "setting protobuf version to $2" 
		pb_version=$2
		shift 2;;
	    -u | --build-oai-ue )
		echo "Will install OAI UE from source" 
		BUILD_OAI_UE=1
		shift ;;
	    -U | --snap-oai-ue )
		echo "Will install OAI UE from snap" 
		SNAP_OAI_UE=1
		shift ;;
	    -v | --revision )
		echo "setting snap revision is set to $2" 
		snap_revision=$2
		shift 2;;
	    -T | --snap-tracer )
		echo "Will install OAI Tracer from snap" 
		SNAP_OAI_TRACER=1
		shift ;;
	    -h | --help)
		print_help
		exit 1;;
	    *)
		print_help
		if [ "$1" != "-h" -o "$1" != "--help" -o "$1" != "-help" ]; then 
		    echo_fatal "Unknown option $1"
		fi 
		break;;
	esac
    done
    
    if [ "$CLEAN_SNAPS" = "1" ] ; then
	clean_snaps
	echo_info "Remove all the previously installed snaps"
    fi
    
    if [ "$INSTALL_PKG" = "1" ] ; then
	install_required_packages
	echo_info "Installed the required packages"
    fi

    if [ "$INSTALL_OPTIONAL" = "1" ] ; then
	echo_info "Installing optional packages"
	install_optional_packages
	echo_info "Installed the optional packages"
    fi
  
    if [ "$PULL_DOCKER_IMAGES" = "1" ] ; then
        pull_docker_images
        echo_info "Pulled all the docker images of mosaic5g"
    fi

    
    if [ "$BUILD_M5G" = "1" ] ; then
	echo_info "Build Customized MOSAIC5G.io Sotware Platforms"
	init_build_m5g
	build_m5g
    else
	init_build_m5g
	if [ "$BUILD_RTC" = "1" ] ; then
	    echo_info "Building FlexRAN realtime controller"
            build_rtc
	fi
	if [ "$BUILD_OAI_RAN" = "1" ] ; then
	    echo_info "Building OAI RAN with the FlexRAN Agent"
            build_oai_ran
	fi
	if [ "$BUILD_OAI_RAN" = "1" ] ; then
	    echo_info "Building OAI RAN with the FlexRAN Agent"
            build_oai_ran
	fi
	if [ "$BUILD_OAI_UE" = "1" ] ; then
	    echo_info "Building OAI UE"
            build_oai_ue
	fi
	if [ "$BUILD_OAI_CN" = "1" ] ; then
	    echo_info "Building OAI CN with the LL-MEC Agent"
            build_oai_cn
	fi
	if [ "$BUILD_LLMEC" = "1" ] ; then
	    echo_info "Building lowlatency MEC platforms"
            build_llmec
	fi
	if [ "$BUILD_OVS_GTP" = "1" ] ; then
	    echo_info "Building OVS with GTP"
            build_ovs_gtp
	fi
	if [ "$BUILD_JOX" = "1" ] ; then
	    echo_info "Building JOX orchestrator"
            build_jox
	fi
	if [ "$BUILD_STORE" = "1" ] ; then
	    echo_info "Building Store"
            build_store
	fi

	if [ "$BUILD_KUBE5G" = "1" ] ; then
            echo_info "Building kube5g"
            build_kube5g
	fi

    fi
    
    if [ "$SNAP_M5G" = "1" ] ; then
	echo_info "Snap MOSAIC5G.io Sotware Platforms"
	init_snap_m5g
	snap_m5g
    else
	init_snap_m5g
	if [ "$SNAP_RTC" = "1" ] ; then
	    echo_info "Snap FlexRAN realtime controller"
            snap_m5g_module "flexran"
	fi
	if [ "$SNAP_OAI_RAN" = "1" ] ; then
	    echo_info "Snap OAI RAN with the FlexRAN Agent"
            snap_m5g_module "oai-ran"
	fi
	if [ "$SNAP_OAI_SIM" = "1" ] ; then
	    echo_info "Snap OAI SIM with the FlexRAN Agent"
            snap_m5g_module "oai-sim"
	fi
	if [ "$SNAP_OAI_UE" = "1" ] ; then
	    echo_info "Snap OAI UE"
            snap_m5g_module "oai-ue"
	fi
	if [ "$SNAP_OAI_CN" = "v2" ] ; then
	    echo_info "Snap OAI CN v2 with the LL-MEC Agent"
            snap_m5g_module "oai-cn2"
	elif [ "$SNAP_OAI_CN" = "v1" ] ; then
	    echo_info "Snap OAI CN v1 with the LL-MEC Agent"
            snap_m5g_module "oai-cn"
	fi
	if [ "$SNAP_LLMEC" = "1" ] ; then
	    echo_info "Snap lowlatency MEC platforms"
            snap_m5g_module "ll-mec"
	fi
	if [ "$SNAP_OVS_GTP" = "1" ] ; then
	    echo_info "Snap OVS with GTP not yet supported !"
            #snap_ovs_gtp
	fi
	if [ "$SNAP_OAI_TRACER" = "1" ] ; then
	    echo_info "Snap OAI Tracer"
            snap_m5g_module "oai-tracer"
	fi
    fi
    
    
}

main "$@"
